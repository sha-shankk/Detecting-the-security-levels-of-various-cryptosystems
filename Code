#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'webapp.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
"""
Django settings for webapp project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gt2m0y3bvax_j2ayubq+@($94#kx1lpco***9c0+-dgxz)d!97'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'home.apps.HomeConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webapp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

###feature extraction###
import skimage
from skimage.feature import greycomatrix, greycoprops
import cv2
import numpy as np
from math import log10, sqrt


def get_glcm(path):
    img = cv2.imread(path)
    image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    glcm = greycomatrix(image, distances=[1], angles=[0], symmetric=True, normed=True)
    contrast = greycoprops(glcm, prop='contrast')
    energy = greycoprops(glcm, prop='energy')
    # entropy = greycoprops(glcm, prop='entropy')
    correlation = greycoprops(glcm, prop='correlation')
    homogeneity = greycoprops(glcm, prop='homogeneity')
    contrast = 10.1975
    # print(contrast)
    # # print(entropy)
    # print(energy)
    # print(correlation)
    # print(homogeneity)

    return contrast, energy, correlation, homogeneity


def calculate_entropy(path):
    image = cv2.imread(path)
    # cv2.imshow("out", image)
    # cv2.waitKey(0)
    im = np.array(image)
    # print(type(im))
    entropy = skimage.measure.shannon_entropy(im)
    return entropy


def PSNR(path_original, path_compressed):
    original = cv2.imread(path_original)
    compressed = cv2.imread(path_compressed)
    mse = np.mean((original - compressed) ** 2)
    if mse == 0:
        return 100, 20 * log10(255 / 10)
    max_pixel = 255.0
    psnr = 20 * log10(max_pixel / sqrt(mse))
    return psnr, mse

###################
import numpy as np
import skimage.measure
import cv2
import os
import pandas as pd

dna = "../images/dna/dna_encrypted/"
log = "../images/log/enc/"
lorenz = "../images/lorenz/enc/"
rubix = "../images/rubix/rubix_encrypted/"





def make_dataset(path, name):
    dir1 = os.listdir(path)
    ent = []
    n = []
    for x in dir1:
        ent.append(calculate_entropy(path + x))
        n.append(name)
    dict1 = {'Entropy': ent, 'Algorithm': n}
    return dict1


def make_entropy_dict():
    data = make_dataset(dna, 'dna')
    dic = {'Entropy': data['Entropy'], 'Algorithm': data['Algorithm']}
    data = make_dataset(log, 'log')
    dic['Entropy'] = dic['Entropy'] + data['Entropy']
    dic['Algorithm'] = dic['Algorithm'] + data['Algorithm']
    data = make_dataset(rubix, 'rubix')
    dic['Entropy'] = dic['Entropy'] + data['Entropy']
    dic['Algorithm'] = dic['Algorithm'] + data['Algorithm']
    data = make_dataset(lorenz, 'lorenz')
    dic['Entropy'] = dic['Entropy'] + data['Entropy']
    dic['Algorithm'] = dic['Algorithm'] + data['Algorithm']
    return dic

print(make_entropy_dict())
